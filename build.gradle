plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.github.blindpirate.gogradle' version '0.11.4'
}

def language  = 'jp' // 'en'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

version = '0.3.1'

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile "commons-cli:commons-cli:1.2"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-io:commons-io:2.4"
    compile "commons-net:commons-net:3.3"
//    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'org.codehaus.gpars:gpars:1.2.0'
    compile 'org.yaml:snakeyaml:1.23'
    compile 'com.xlson.groovycsv:groovycsv:1.1'
    compile 'org.apache.commons:commons-csv:1.3'
    compile 'org.apache.commons:commons-compress:1.+'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'commons-validator:commons-validator:1.6'

    compile 'org.hidetake:groovy-ssh:2.7.1'
    compile 'ch.ethz.ganymed:ganymed-ssh2:262'
    compile 'net.sf.expectit:expectit-core:0.9.0'
    compile 'com.jcraft:jsch:0.1.54'
    compile 'com.goebl:david-webb:1.3.0'
    // compile "org.apache.poi:poi:3.17"
    // compile "org.apache.poi:poi-ooxml:3.17"
    compile "org.apache.poi:poi:4.1.2"
    compile "org.apache.poi:poi-ooxml:4.1.2"
    compile 'org.codehaus.groovy:groovy-ant:2.0.1'
    compile "mysql:mysql-connector-java:5.1.6"
    // compile 'com.oracle.jdbc:ojdbc8:12.2.0.1'
    compile 'com.github.noraui:ojdbc8:12.2.0.1'
    // compile 'com.github.noraui:ojdbc7:12.1.0.2'
    compile "com.h2database:h2:1.3.157"
    compile "com.taskadapter:redmine-java-api:3.1.2"

    // K-Means 法クラスタリング検証用(v4.42 α)
    // リファレンス：
    //      https://elki-project.github.io/tutorial/same-size_k_means
    //      https://github.com/elki-project/elki
    compile 'de.lmu.ifi.dbs.elki:elki:0.7.5'
    compile 'de.lmu.ifi.dbs.elki:elki-core-util:0.7.5'
    compile 'de.lmu.ifi.dbs.elki:elki-clustering:0.7.5'

    compile 'info.picocli:picocli-groovy:4.1.1'
    compile 'com.moandjiezana.toml:toml4j:0.7.2'

    compile 'org.apache.poi:poi:4.1.2'
    compile 'org.apache.poi:poi-ooxml:4.1.2'
    compile 'com.github.ozlerhakan:poiji:2.8.0'
    compile 'org.zeroturnaround:zt-zip:1.14'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile 'com.google.code.gson:gson:2.8.6'
    compile 'com.google.guava:guava:29.0-jre'

    implementation 'org.codehaus.groovy:groovy-all:3.0.4'
    testCompile 'org.spockframework:spock-core:2.0-M2-groovy-3.0'
}

test {
    useJUnitPlatform()
    afterSuite { desc, result ->
        if (!desc.parent) {
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

// run タスク実行時に、--args オプションで実行引数を指定する
//  例： gradle run --args 'add -V'
run {
    if(project.hasProperty('appArgs')) {
        args Eval.me(appArgs)
    }
}

application {
    mainClassName = 'com.getconfig.Command.GetconfigCommand'

    applicationDefaultJvmArgs = [
        "-Dlogback.configurationFile=./config/logback.xml",
        "-Dtest.config=./config/config.groovy",
    ]
}

golang {
    packagePath = 'github.com/getperf/getperf2'
}

goBuild.dependsOn goCheck 

goBuild {
    targetPlatform = ['linux-amd64', 'windows-amd64']
    go 'build -ldflags="-s -w" -o ./gconf${GOEXE} github.com/getperf/getperf2/cmd/gconf'
}

task zipApp(type: Zip, dependsOn: shadowJar) {
    def target  = 'server-config'
    archiveName = "${baseName}-${version}.${extension}"
    // Issue: Copy hidden file
    // http://stackoverflow.com/questions/29504250/how-to-copy-hidden-resource-files-in-gradle
    org.apache.tools.ant.DirectoryScanner.removeDefaultExclude("**/.gitignore")

    into("./${target}/") {
        from file("src/main/resources/root/.gitignore")
        from fileTree(dir: "src/main/resources/root/${language}")
        from fileTree(dir : '.').include('Readme.md', 'LICENSE.txt', 'Changes.txt')
    }
    into("./${target}/") {
        fileMode 0755
        from fileTree(dir : '.').include('gconf', 'gconf.exe', 'getcf', 'getcf.bat')
    }
    into ("./${target}/config") {
        from fileTree(dir : 'config').include(
            'config.groovy', 'cmdb_sample.groovy', "*.xml")
    }
    [
        'lib',
        'build/libs',
    ].each { path ->
        into ("./${target}/${path}") {
            from path
        }
    }
    into ("./${target}/src/test/resources/inventory") {
        from 'src/test/resources/tutorial'
    }
}

artifacts {
    archives zipApp
}
